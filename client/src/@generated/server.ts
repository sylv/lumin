/* eslint-disable */
/* tslint:disable */
/* Generated by Specta for Juno. DO NOT EDIT */
import { initTRPC } from '@trpc/server';

export type AddTorrentInput = { magnet_uris: string[]; category: string | null }

export type DeleteTorrentInput = { torrent_id: number }

export type GetTorrentFilesInput = { torrent_id: number }

export type Torrent = { id: number; hash: string; name: string; remote_id: number | null; magnet_uri: string; state: TorrentState; progress: number; seeds: number; peers: number; upload_speed: number; download_speed: number; ratio: number; error_message: string | null; eta_secs: number; size: number; category: string | null; files_created: boolean; created_at: number; updated_at: number; checked_at: number | null; finished_at: number | null; orphaned: boolean }

export type TorrentFile = { id: number; remote_id: number; torrent_id: number; duration_hint_secs: number | null; path: string; size: number }

export type TorrentState = "Pending" | "Downloading" | "Ready" | "Stalled" | "Error" | "Removing"

const t = initTRPC.create();
const publicProcedure = t.procedure;
const appRouter = t.router({
    add_torrent: publicProcedure.input((value): AddTorrentInput => { throw new Error('Router should not be used') }).mutation((opts): void => { throw new Error('Router should not be used') }),
delete_torrent: publicProcedure.input((value): DeleteTorrentInput => { throw new Error('Router should not be used') }).mutation((opts): void => { throw new Error('Router should not be used') }),
get_torrent_files: publicProcedure.input((value): GetTorrentFilesInput => { throw new Error('Router should not be used') }).output((value): TorrentFile[] => { throw new Error('Router should not be used') }).query((opts): TorrentFile[] => { throw new Error('Router should not be used') }),
get_torrents: publicProcedure.output((value): Torrent[] => { throw new Error('Router should not be used') }).query((opts): Torrent[] => { throw new Error('Router should not be used') }),
reconcile_torrents: publicProcedure.mutation((opts): void => { throw new Error('Router should not be used') })
});

export type AppRouter = typeof appRouter;
